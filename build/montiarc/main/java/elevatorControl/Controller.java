/* generated by template ma2java.component.CompilationUnit.ftl*/

/* (c) https://github.com/MontiCore/monticore */
/* generated by template ma2java.Package.ftl*/
package elevatorControl;

/* generated by template ma2java.Import.ftl*/
import elevatorControl.ElevatorIO.DoorCMD;
/* generated by template ma2java.Import.ftl*/
import elevatorControl.ElevatorIO.LiftCMD;
/* generated by template ma2java.Import.ftl*/
import elevatorControl.ElevatorIO.Direction;
/* generated by template ma2java.Import.ftl*/
import java.util.List;
/* generated by template ma2java.Import.ftl*/
import java.lang.*;

/* generated by template ma2java.component.Component.ftl*/

/* generated by template ma2java.component.Header.ftl*/

public class Controller implements montiarc.rte.timesync.IComponent {

  private String instanceName = "";

  public void setInstanceName(String instanceName) {
    this.instanceName = instanceName;
  }

  public String getInstanceName() {
    return this.instanceName;
  }

  // ports
  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IInPort<java.util.List<java.lang.Boolean>> req;

  public montiarc.rte.timesync.IInPort<java.util.List<java.lang.Boolean>> getReq() {
    return this.req;
  }

  public void setReq(montiarc.rte.timesync.IInPort<java.util.List<java.lang.Boolean>> req) {
    this.req = req;
  }

  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IInPort<java.util.List<java.lang.Boolean>> at;

  public montiarc.rte.timesync.IInPort<java.util.List<java.lang.Boolean>> getAt() {
    return this.at;
  }

  public void setAt(montiarc.rte.timesync.IInPort<java.util.List<java.lang.Boolean>> at) {
    this.at = at;
  }

  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IInPort<java.lang.Boolean> isClosed;

  public montiarc.rte.timesync.IInPort<java.lang.Boolean> getIsClosed() {
    return this.isClosed;
  }

  public void setIsClosed(montiarc.rte.timesync.IInPort<java.lang.Boolean> isClosed) {
    this.isClosed = isClosed;
  }

  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IOutPort<elevatorControl.ElevatorIO.DoorCMD> door;

  public montiarc.rte.timesync.IOutPort<elevatorControl.ElevatorIO.DoorCMD> getDoor() {
    return this.door;
  }

  public void setDoor(montiarc.rte.timesync.IOutPort<elevatorControl.ElevatorIO.DoorCMD> door) {
    this.door = door;
  }

  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IOutPort<elevatorControl.ElevatorIO.LiftCMD> lift;

  public montiarc.rte.timesync.IOutPort<elevatorControl.ElevatorIO.LiftCMD> getLift() {
    return this.lift;
  }

  public void setLift(montiarc.rte.timesync.IOutPort<elevatorControl.ElevatorIO.LiftCMD> lift) {
    this.lift = lift;
  }

  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IOutPort<java.lang.Integer> clear;

  public montiarc.rte.timesync.IOutPort<java.lang.Integer> getClear() {
    return this.clear;
  }

  public void setClear(montiarc.rte.timesync.IOutPort<java.lang.Integer> clear) {
    this.clear = clear;
  }

  // parameters

  // variables
  protected Direction direction;
  protected int current;
  protected int searchPosition;
  protected int target;
  protected int timer;
  protected boolean stopNext;

  public Controller() {

    this.direction = Direction.NA;
    this.current = 0;
    this.searchPosition = 0;
    this.target = 0;
    this.timer = 5;
    this.stopNext = false;
  }

  /* generated by template ma2java.component.Atomic.ftl*/

  /* generated by template ma2java.component.Automaton.ftl*/

  protected States currentState;

  protected States getCurrentState() {
    return this.currentState;
  }

  public void compute() {
    montiarc.rte.log.Log.comment("Computing component " + this.getInstanceName() + "");
    // log state @ pre
    montiarc.rte.log.Log.trace("State@pre = " + this.getCurrentState());
    // log input values
    montiarc.rte.log.Log.trace("Value of input port req = " + this.getReq().getValue());
    montiarc.rte.log.Log.trace("Value of input port at = " + this.getAt().getValue());
    montiarc.rte.log.Log.trace("Value of input port isClosed = " + this.getIsClosed().getValue());
    // transition from the current state
    switch (currentState) {
      case Init:
        transitionFromInit();
        break;
      case WaitTimer:
        transitionFromWaitTimer();
        break;
      case CloseDoor:
        transitionFromCloseDoor();
        break;
      case DriveDown:
        transitionFromDriveDown();
        break;
      case OK:
        transitionFromOK();
        break;
      case WaitReq:
        transitionFromWaitReq();
        break;
      case SearchFloor:
        transitionFromSearchFloor();
        break;
      case SearchFloorUp:
        transitionFromSearchFloorUp();
        break;
      case SearchFloorDown:
        transitionFromSearchFloorDown();
        break;
      case Found:
        transitionFromFound();
        break;
      case Continue:
        transitionFromContinue();
        break;
      case GoUp:
        transitionFromGoUp();
        break;
      case GoDown:
        transitionFromGoDown();
        break;
      case Door:
        transitionFromDoor();
        break;
    }
    // log output values
    montiarc.rte.log.Log.trace("Value of output port door = " + this.getDoor().getValue());
    montiarc.rte.log.Log.trace("Value of output port lift = " + this.getLift().getValue());
    montiarc.rte.log.Log.trace("Value of output port clear = " + this.getClear().getValue());
    // log state @ post
    montiarc.rte.log.Log.trace("State@post = " + this.getCurrentState());
  }

  protected enum States {
    Init(),
    WaitTimer(Init),
    CloseDoor(Init),
    DriveDown(Init),
    OK(Init),
    WaitReq(),
    SearchFloor(WaitReq),
    SearchFloorUp(WaitReq),
    SearchFloorDown(WaitReq),
    Found(WaitReq),
    Continue(),
    GoUp(),
    GoDown(),
    Door();

    final States superState;

    java.util.Optional<States> getSuperState() {
      return java.util.Optional.ofNullable(this.superState);
    }

    States() {
      this.superState = null;
    }

    States(States superState) {
      this.superState = superState;
    }
  }

  protected void exit(States from, States to) {
    switch (from) {
      case Init:
        exitInit();
        break;
      case WaitTimer:
        exitWaitTimer();
        break;
      case CloseDoor:
        exitCloseDoor();
        break;
      case DriveDown:
        exitDriveDown();
        break;
      case OK:
        exitOK();
        break;
      case WaitReq:
        exitWaitReq();
        break;
      case SearchFloor:
        exitSearchFloor();
        break;
      case SearchFloorUp:
        exitSearchFloorUp();
        break;
      case SearchFloorDown:
        exitSearchFloorDown();
        break;
      case Found:
        exitFound();
        break;
      case Continue:
        exitContinue();
        break;
      case GoUp:
        exitGoUp();
        break;
      case GoDown:
        exitGoDown();
        break;
      case Door:
        exitDoor();
        break;
    }
    if (from != to && from.getSuperState().isPresent()) {
      exit(from.getSuperState().get(), to);
    }
  }

  protected void transitionFromInit() {
    // input
    final java.util.List<java.lang.Boolean> req = this.getReq().getValue();
    final java.util.List<java.lang.Boolean> at = this.getAt().getValue();
    final java.lang.Boolean isClosed = this.getIsClosed().getValue();

    this.getDoor().sync();
    this.getLift().sync();
    this.getClear().sync();
  }

  protected void transitionToInit() {
    // transition to state
    this.currentState = States.Init;
    this.entryInit();
    // transition to sub-state
    this.initWaitTimer();
    this.transitionToWaitTimer();
  }

  protected void entryInit() {}

  protected void exitInit() {}

  protected void initInit() {
    // inputs
    final java.util.List<java.lang.Boolean> req = this.getReq().getValue();
    final java.util.List<java.lang.Boolean> at = this.getAt().getValue();
    final java.lang.Boolean isClosed = this.getIsClosed().getValue();

    // outputs
    elevatorControl.ElevatorIO.DoorCMD door = null;
    elevatorControl.ElevatorIO.LiftCMD lift = null;
    java.lang.Integer clear = null;

    // initial action
    clear = 0;

    // result
    if (door != null) this.getDoor().setValue(door);
    if (lift != null) this.getLift().setValue(lift);
    if (clear != null) this.getClear().setValue(clear);
  }

  protected void transitionFromWaitTimer() {
    // input
    final java.util.List<java.lang.Boolean> req = this.getReq().getValue();
    final java.util.List<java.lang.Boolean> at = this.getAt().getValue();
    final java.lang.Boolean isClosed = this.getIsClosed().getValue();

    /* generated by template ma2java.component.Transition.ftl*/

    if (timer > 0) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.WaitTimer);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        timer = timer - 1;
        clear = 0;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToWaitTimer();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (timer == 0) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.WaitTimer);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        clear = 0;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToCloseDoor();
    } else {
      // transition from super state
      transitionFromInit();
    }

    this.getDoor().sync();
    this.getLift().sync();
    this.getClear().sync();
  }

  protected void transitionToWaitTimer() {
    // transition to state
    this.currentState = States.WaitTimer;
    this.entryWaitTimer();
  }

  protected void entryWaitTimer() {}

  protected void exitWaitTimer() {}

  protected void initWaitTimer() {}

  protected void transitionFromCloseDoor() {
    // input
    final java.util.List<java.lang.Boolean> req = this.getReq().getValue();
    final java.util.List<java.lang.Boolean> at = this.getAt().getValue();
    final java.lang.Boolean isClosed = this.getIsClosed().getValue();

    /* generated by template ma2java.component.Transition.ftl*/

    if (!isClosed) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.CloseDoor);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        clear = 0;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToCloseDoor();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (at.get(0) && isClosed) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.CloseDoor);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        current = 1;
        direction = Direction.UP;
        clear = 0;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToOK();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (!at.get(0) && isClosed) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.CloseDoor);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        lift = LiftCMD.DOWN;
        clear = 0;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToDriveDown();
    } else {
      // transition from super state
      transitionFromInit();
    }

    this.getDoor().sync();
    this.getLift().sync();
    this.getClear().sync();
  }

  protected void transitionToCloseDoor() {
    // transition to state
    this.currentState = States.CloseDoor;
    this.entryCloseDoor();
  }

  protected void entryCloseDoor() {}

  protected void exitCloseDoor() {}

  protected void initCloseDoor() {}

  protected void transitionFromDriveDown() {
    // input
    final java.util.List<java.lang.Boolean> req = this.getReq().getValue();
    final java.util.List<java.lang.Boolean> at = this.getAt().getValue();
    final java.lang.Boolean isClosed = this.getIsClosed().getValue();

    /* generated by template ma2java.component.Transition.ftl*/

    if (!at.get(0)) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.DriveDown);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        clear = 0;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToDriveDown();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (at.get(0)) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.DriveDown);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        searchPosition = 1;
        current = 1;
        direction = Direction.UP;
        clear = 0;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToOK();
    } else {
      // transition from super state
      transitionFromInit();
    }

    this.getDoor().sync();
    this.getLift().sync();
    this.getClear().sync();
  }

  protected void transitionToDriveDown() {
    // transition to state
    this.currentState = States.DriveDown;
    this.entryDriveDown();
  }

  protected void entryDriveDown() {}

  protected void exitDriveDown() {}

  protected void initDriveDown() {}

  protected void transitionFromOK() {
    // input
    final java.util.List<java.lang.Boolean> req = this.getReq().getValue();
    final java.util.List<java.lang.Boolean> at = this.getAt().getValue();
    final java.lang.Boolean isClosed = this.getIsClosed().getValue();

    /* generated by template ma2java.component.Transition.ftl*/

    // exit state(s)
    this.exit(this.getCurrentState(), States.OK);
    exitInit();
    // output
    elevatorControl.ElevatorIO.DoorCMD door = null;
    elevatorControl.ElevatorIO.LiftCMD lift = null;
    java.lang.Integer clear = null;

    // reaction
    {
      stopNext = true;
      clear = 0;
    }
    // result
    if (door != null) this.getDoor().setValue(door);
    if (lift != null) this.getLift().setValue(lift);
    if (clear != null) this.getClear().setValue(clear);

    // entry state(s)
    this.transitionToWaitReq();

    this.getDoor().sync();
    this.getLift().sync();
    this.getClear().sync();
  }

  protected void transitionToOK() {
    // transition to state
    this.currentState = States.OK;
    this.entryOK();
  }

  protected void entryOK() {}

  protected void exitOK() {}

  protected void initOK() {}

  protected void transitionFromWaitReq() {
    // input
    final java.util.List<java.lang.Boolean> req = this.getReq().getValue();
    final java.util.List<java.lang.Boolean> at = this.getAt().getValue();
    final java.lang.Boolean isClosed = this.getIsClosed().getValue();

    this.getDoor().sync();
    this.getLift().sync();
    this.getClear().sync();
  }

  protected void transitionToWaitReq() {
    // transition to state
    this.currentState = States.WaitReq;
    this.entryWaitReq();
    // transition to sub-state
    this.initSearchFloor();
    this.transitionToSearchFloor();
  }

  protected void entryWaitReq() {}

  protected void exitWaitReq() {}

  protected void initWaitReq() {}

  protected void transitionFromSearchFloor() {
    // input
    final java.util.List<java.lang.Boolean> req = this.getReq().getValue();
    final java.util.List<java.lang.Boolean> at = this.getAt().getValue();
    final java.lang.Boolean isClosed = this.getIsClosed().getValue();

    /* generated by template ma2java.component.Transition.ftl*/

    if (!req.get(searchPosition) && direction == Direction.UP) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.SearchFloor);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        if (searchPosition < 4) {
          searchPosition = searchPosition + 1;

        } else {
          searchPosition = 1;
        }
        clear = 0;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToSearchFloorUp();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (!req.get(searchPosition) && direction == Direction.DOWN) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.SearchFloor);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        if (searchPosition > 1) {
          searchPosition = searchPosition - 1;

        } else {
          searchPosition = 4;
        }
        clear = 0;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToSearchFloorDown();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (req.get(searchPosition)) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.SearchFloor);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        target = searchPosition;
        clear = 0;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToFound();
    } else {
      // transition from super state
      transitionFromWaitReq();
    }

    this.getDoor().sync();
    this.getLift().sync();
    this.getClear().sync();
  }

  protected void transitionToSearchFloor() {
    // transition to state
    this.currentState = States.SearchFloor;
    this.entrySearchFloor();
  }

  protected void entrySearchFloor() {}

  protected void exitSearchFloor() {}

  protected void initSearchFloor() {}

  protected void transitionFromSearchFloorUp() {
    // input
    final java.util.List<java.lang.Boolean> req = this.getReq().getValue();
    final java.util.List<java.lang.Boolean> at = this.getAt().getValue();
    final java.lang.Boolean isClosed = this.getIsClosed().getValue();

    /* generated by template ma2java.component.Transition.ftl*/

    if (!req.get(searchPosition)) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.SearchFloorUp);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        if (searchPosition < 4) {
          searchPosition = searchPosition + 1;

        } else {
          searchPosition = 1;
        }
        clear = 0;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToSearchFloorUp();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (req.get(searchPosition)) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.SearchFloorUp);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        target = searchPosition;
        clear = 0;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToFound();
    } else {
      // transition from super state
      transitionFromWaitReq();
    }

    this.getDoor().sync();
    this.getLift().sync();
    this.getClear().sync();
  }

  protected void transitionToSearchFloorUp() {
    // transition to state
    this.currentState = States.SearchFloorUp;
    this.entrySearchFloorUp();
  }

  protected void entrySearchFloorUp() {}

  protected void exitSearchFloorUp() {}

  protected void initSearchFloorUp() {}

  protected void transitionFromSearchFloorDown() {
    // input
    final java.util.List<java.lang.Boolean> req = this.getReq().getValue();
    final java.util.List<java.lang.Boolean> at = this.getAt().getValue();
    final java.lang.Boolean isClosed = this.getIsClosed().getValue();

    /* generated by template ma2java.component.Transition.ftl*/

    if (!req.get(searchPosition)) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.SearchFloorDown);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        if (searchPosition > 1) {
          searchPosition = searchPosition - 1;

        } else {
          searchPosition = 4;
        }
        clear = 0;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToSearchFloorDown();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (req.get(searchPosition)) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.SearchFloorDown);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        target = searchPosition;
        clear = 0;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToFound();
    } else {
      // transition from super state
      transitionFromWaitReq();
    }

    this.getDoor().sync();
    this.getLift().sync();
    this.getClear().sync();
  }

  protected void transitionToSearchFloorDown() {
    // transition to state
    this.currentState = States.SearchFloorDown;
    this.entrySearchFloorDown();
  }

  protected void entrySearchFloorDown() {}

  protected void exitSearchFloorDown() {}

  protected void initSearchFloorDown() {}

  protected void transitionFromFound() {
    // input
    final java.util.List<java.lang.Boolean> req = this.getReq().getValue();
    final java.util.List<java.lang.Boolean> at = this.getAt().getValue();
    final java.lang.Boolean isClosed = this.getIsClosed().getValue();

    /* generated by template ma2java.component.Transition.ftl*/

    if (current < target) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.Found);
      exitWaitReq();
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        direction = Direction.UP;
        stopNext = false;
        clear = 0;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToContinue();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (current > target) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.Found);
      exitWaitReq();
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        direction = Direction.DOWN;
        stopNext = false;
        clear = 0;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToContinue();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (current == target) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.Found);
      exitWaitReq();
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        stopNext = true;
        clear = 0;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToContinue();
    } else {
      // transition from super state
      transitionFromWaitReq();
    }

    this.getDoor().sync();
    this.getLift().sync();
    this.getClear().sync();
  }

  protected void transitionToFound() {
    // transition to state
    this.currentState = States.Found;
    this.entryFound();
  }

  protected void entryFound() {}

  protected void exitFound() {}

  protected void initFound() {}

  protected void transitionFromContinue() {
    // input
    final java.util.List<java.lang.Boolean> req = this.getReq().getValue();
    final java.util.List<java.lang.Boolean> at = this.getAt().getValue();
    final java.lang.Boolean isClosed = this.getIsClosed().getValue();

    /* generated by template ma2java.component.Transition.ftl*/

    if (direction == Direction.UP
        && isClosed
        && at.get(current)
        && req.get(current + 1)
        && !stopNext) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.Continue);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        current = current + 1;
        stopNext = true;
        lift = LiftCMD.UP;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToGoUp();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (direction == Direction.UP
        && isClosed
        && at.get(current)
        && !req.get(current + 1)
        && !stopNext) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.Continue);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        current = current + 1;
        stopNext = false;
        lift = LiftCMD.UP;
        clear = 0;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToGoDown();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (direction == Direction.DOWN
        && isClosed
        && at.get(current)
        && req.get(current - 1)
        && !stopNext) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.Continue);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        current = current - 1;
        stopNext = true;
        lift = LiftCMD.UP;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToGoDown();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (direction == Direction.DOWN
        && isClosed
        && at.get(current)
        && !req.get(current - 1)
        && !stopNext) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.Continue);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        current = current - 1;
        stopNext = false;
        lift = LiftCMD.UP;
        clear = 0;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToGoDown();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (at.get(current) && req.get(current) && stopNext) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.Continue);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        lift = LiftCMD.STOP;
        door = DoorCMD.OPEN;
        clear = current;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToDoor();
    } else {
    }

    this.getDoor().sync();
    this.getLift().sync();
    this.getClear().sync();
  }

  protected void transitionToContinue() {
    // transition to state
    this.currentState = States.Continue;
    this.entryContinue();
  }

  protected void entryContinue() {}

  protected void exitContinue() {}

  protected void initContinue() {}

  protected void transitionFromGoUp() {
    // input
    final java.util.List<java.lang.Boolean> req = this.getReq().getValue();
    final java.util.List<java.lang.Boolean> at = this.getAt().getValue();
    final java.lang.Boolean isClosed = this.getIsClosed().getValue();

    /* generated by template ma2java.component.Transition.ftl*/

    if (direction == Direction.UP
        && isClosed
        && at.get(current)
        && req.get(current + 1)
        && !stopNext) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.GoUp);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        current = current + 1;
        stopNext = true;
        lift = LiftCMD.UP;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToGoUp();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (direction == Direction.UP
        && isClosed
        && at.get(current)
        && !req.get(current + 1)
        && !stopNext) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.GoUp);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        current = current + 1;
        stopNext = false;
        lift = LiftCMD.UP;
        clear = 0;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToGoUp();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (at.get(current) && req.get(current) && stopNext) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.GoUp);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        lift = LiftCMD.STOP;
        door = DoorCMD.OPEN;
        clear = current;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToDoor();
    } else {
    }

    this.getDoor().sync();
    this.getLift().sync();
    this.getClear().sync();
  }

  protected void transitionToGoUp() {
    // transition to state
    this.currentState = States.GoUp;
    this.entryGoUp();
  }

  protected void entryGoUp() {}

  protected void exitGoUp() {}

  protected void initGoUp() {}

  protected void transitionFromGoDown() {
    // input
    final java.util.List<java.lang.Boolean> req = this.getReq().getValue();
    final java.util.List<java.lang.Boolean> at = this.getAt().getValue();
    final java.lang.Boolean isClosed = this.getIsClosed().getValue();

    /* generated by template ma2java.component.Transition.ftl*/

    if (direction == Direction.DOWN
        && isClosed
        && at.get(current)
        && req.get(current - 1)
        && !stopNext) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.GoDown);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        current = current - 1;
        stopNext = true;
        lift = LiftCMD.DOWN;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToGoDown();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (direction == Direction.DOWN
        && isClosed
        && at.get(current)
        && !req.get(current - 1)
        && !stopNext) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.GoDown);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        current = current - 1;
        stopNext = false;
        lift = LiftCMD.DOWN;
        clear = 0;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToGoDown();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (at.get(current) && req.get(current) && stopNext) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.GoDown);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        lift = LiftCMD.STOP;
        door = DoorCMD.OPEN;
        clear = current;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToDoor();
    } else {
    }

    this.getDoor().sync();
    this.getLift().sync();
    this.getClear().sync();
  }

  protected void transitionToGoDown() {
    // transition to state
    this.currentState = States.GoDown;
    this.entryGoDown();
  }

  protected void entryGoDown() {}

  protected void exitGoDown() {}

  protected void initGoDown() {}

  protected void transitionFromDoor() {
    // input
    final java.util.List<java.lang.Boolean> req = this.getReq().getValue();
    final java.util.List<java.lang.Boolean> at = this.getAt().getValue();
    final java.lang.Boolean isClosed = this.getIsClosed().getValue();

    /* generated by template ma2java.component.Transition.ftl*/

    if (req.get(current) && at.get(current)) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.Door);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      {
        door = DoorCMD.OPEN;
        clear = current;
      }
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      this.transitionToDoor();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (!req.get(current) && isClosed) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.Door);
      // output
      elevatorControl.ElevatorIO.DoorCMD door = null;
      elevatorControl.ElevatorIO.LiftCMD lift = null;
      java.lang.Integer clear = null;

      // reaction
      // result
      if (door != null) this.getDoor().setValue(door);
      if (lift != null) this.getLift().setValue(lift);
      if (clear != null) this.getClear().setValue(clear);

      // entry state(s)
      entryWaitReq();
      this.transitionToSearchFloor();
    } else {
    }

    this.getDoor().sync();
    this.getLift().sync();
    this.getClear().sync();
  }

  protected void transitionToDoor() {
    // transition to state
    this.currentState = States.Door;
    this.entryDoor();
  }

  protected void entryDoor() {}

  protected void exitDoor() {}

  protected void initDoor() {}

  @Override
  public void init() {
    // execute the initial action
    this.initInit();
    // transition to the initial state
    this.transitionToInit();
    // provide initial value for delay ports

    this.clear.tick();
  }

  public void setUp() {
    this.req =
        new montiarc.rte.timesync.InPort<>(
            !this.getInstanceName().isBlank() ? this.getInstanceName() + "." + "req" : "req");
    this.at =
        new montiarc.rte.timesync.InPort<>(
            !this.getInstanceName().isBlank() ? this.getInstanceName() + "." + "at" : "at");
    this.isClosed =
        new montiarc.rte.timesync.InPort<>(
            !this.getInstanceName().isBlank()
                ? this.getInstanceName() + "." + "isClosed"
                : "isClosed");
    this.door =
        new montiarc.rte.timesync.OutPort<>(
            !this.getInstanceName().isBlank() ? this.getInstanceName() + "." + "door" : "door");
    this.lift =
        new montiarc.rte.timesync.OutPort<>(
            !this.getInstanceName().isBlank() ? this.getInstanceName() + "." + "lift" : "lift");
    this.clear =
        new montiarc.rte.timesync.DelayPort<>(
            !this.getInstanceName().isBlank() ? this.getInstanceName() + "." + "clear" : "clear");
  }

  @Override
  public void tick() {
    // update outgoing ports
    this.door.tick();
    this.lift.tick();
    this.clear.tick();
  }

  @Override
  public boolean isSynced() {
    return this.getReq().isSynced() && this.getAt().isSynced() && this.getIsClosed().isSynced();
  }
}
