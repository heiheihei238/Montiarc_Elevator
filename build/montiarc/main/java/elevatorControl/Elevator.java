/* generated by template ma2java.component.CompilationUnit.ftl*/

/* (c) https://github.com/MontiCore/monticore */
/* generated by template ma2java.Package.ftl*/
package elevatorControl;

/* generated by template ma2java.Import.ftl*/
import java.util.List;
/* generated by template ma2java.Import.ftl*/
import java.lang.*;

/* generated by template ma2java.component.Component.ftl*/

/* generated by template ma2java.component.Header.ftl*/

public class Elevator implements montiarc.rte.timesync.IComponent {

  private String instanceName = "";

  public void setInstanceName(String instanceName) {
    this.instanceName = instanceName;
  }

  public String getInstanceName() {
    return this.instanceName;
  }

  // ports
  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IInPort<java.util.List<java.lang.Boolean>> req;

  public montiarc.rte.timesync.IInPort<java.util.List<java.lang.Boolean>> getReq() {
    return this.req;
  }

  public void setReq(montiarc.rte.timesync.IInPort<java.util.List<java.lang.Boolean>> req) {
    this.req = req;
  }

  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IOutPort<java.lang.Integer> clear;

  public montiarc.rte.timesync.IOutPort<java.lang.Integer> getClear() {
    return this.clear;
  }

  public void setClear(montiarc.rte.timesync.IOutPort<java.lang.Integer> clear) {
    this.clear = clear;
  }

  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IInPort<java.util.List<java.lang.Boolean>> at;

  public montiarc.rte.timesync.IInPort<java.util.List<java.lang.Boolean>> getAt() {
    return this.at;
  }

  public void setAt(montiarc.rte.timesync.IInPort<java.util.List<java.lang.Boolean>> at) {
    this.at = at;
  }

  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IOutPort<java.lang.Boolean> open;

  public montiarc.rte.timesync.IOutPort<java.lang.Boolean> getOpen() {
    return this.open;
  }

  public void setOpen(montiarc.rte.timesync.IOutPort<java.lang.Boolean> open) {
    this.open = open;
  }

  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IOutPort<java.lang.Boolean> close;

  public montiarc.rte.timesync.IOutPort<java.lang.Boolean> getClose() {
    return this.close;
  }

  public void setClose(montiarc.rte.timesync.IOutPort<java.lang.Boolean> close) {
    this.close = close;
  }

  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IOutPort<java.lang.Boolean> up;

  public montiarc.rte.timesync.IOutPort<java.lang.Boolean> getUp() {
    return this.up;
  }

  public void setUp(montiarc.rte.timesync.IOutPort<java.lang.Boolean> up) {
    this.up = up;
  }

  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IOutPort<java.lang.Boolean> down;

  public montiarc.rte.timesync.IOutPort<java.lang.Boolean> getDown() {
    return this.down;
  }

  public void setDown(montiarc.rte.timesync.IOutPort<java.lang.Boolean> down) {
    this.down = down;
  }

  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IInPort<java.lang.Boolean> isOpen;

  public montiarc.rte.timesync.IInPort<java.lang.Boolean> getIsOpen() {
    return this.isOpen;
  }

  public void setIsOpen(montiarc.rte.timesync.IInPort<java.lang.Boolean> isOpen) {
    this.isOpen = isOpen;
  }

  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IInPort<java.lang.Boolean> isClosed;

  public montiarc.rte.timesync.IInPort<java.lang.Boolean> getIsClosed() {
    return this.isClosed;
  }

  public void setIsClosed(montiarc.rte.timesync.IInPort<java.lang.Boolean> isClosed) {
    this.isClosed = isClosed;
  }

  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IInPort<java.lang.Boolean> isObstacle;

  public montiarc.rte.timesync.IInPort<java.lang.Boolean> getIsObstacle() {
    return this.isObstacle;
  }

  public void setIsObstacle(montiarc.rte.timesync.IInPort<java.lang.Boolean> isObstacle) {
    this.isObstacle = isObstacle;
  }

  // parameters

  // variables

  public Elevator() {}

  /* generated by template ma2java.component.Composed.ftl*/

  // subcomponents
  protected elevatorControl.Controller ctrl;

  public elevatorControl.Controller getComponentCtrl() {
    return this.ctrl;
  }

  protected elevatorControl.Door door;

  public elevatorControl.Door getComponentDoor() {
    return this.door;
  }

  protected elevatorControl.Lift lift;

  public elevatorControl.Lift getComponentLift() {
    return this.lift;
  }

  protected java.util.List<montiarc.rte.timesync.IComponent> getAllSubcomponents() {
    return java.util.Arrays.asList(new montiarc.rte.timesync.IComponent[] {ctrl, door, lift});
  }

  @Override
  public void compute() {
    java.util.List<montiarc.rte.timesync.IComponent> notYetComputed =
        new java.util.ArrayList<>(getAllSubcomponents());
    while (notYetComputed.size() > 0) {
      java.util.Set<montiarc.rte.timesync.IComponent> computedThisIteration =
          new java.util.HashSet<>();
      for (montiarc.rte.timesync.IComponent subcomponent : notYetComputed) {
        if (subcomponent.isSynced()) {
          subcomponent.compute();
          computedThisIteration.add(subcomponent);
        }
      }
      if (computedThisIteration.isEmpty()) {
        throw new RuntimeException(
            "Could not complete compute cycle due to not all ports being synced. Likely reasons: Forgot to call init() or cyclic connector loop.");
      } else {
        notYetComputed.removeAll(computedThisIteration);
      }
    }
  }

  public void setUp() {
    this.req =
        new montiarc.rte.timesync.InPort<>(
            !this.getInstanceName().isBlank() ? this.getInstanceName() + "." + "req" : "req");
    this.at =
        new montiarc.rte.timesync.InPort<>(
            !this.getInstanceName().isBlank() ? this.getInstanceName() + "." + "at" : "at");
    this.isOpen =
        new montiarc.rte.timesync.InPort<>(
            !this.getInstanceName().isBlank() ? this.getInstanceName() + "." + "isOpen" : "isOpen");
    this.isClosed =
        new montiarc.rte.timesync.InPort<>(
            !this.getInstanceName().isBlank()
                ? this.getInstanceName() + "." + "isClosed"
                : "isClosed");
    this.isObstacle =
        new montiarc.rte.timesync.InPort<>(
            !this.getInstanceName().isBlank()
                ? this.getInstanceName() + "." + "isObstacle"
                : "isObstacle");
    this.ctrl = new elevatorControl.Controller();
    this.ctrl.setInstanceName(
        !this.getInstanceName().isBlank() ? this.getInstanceName() + ".ctrl" : "ctrl");
    this.ctrl.setUp();
    this.door = new elevatorControl.Door();
    this.door.setInstanceName(
        !this.getInstanceName().isBlank() ? this.getInstanceName() + ".door" : "door");
    this.door.setUp();
    this.lift = new elevatorControl.Lift();
    this.lift.setInstanceName(
        !this.getInstanceName().isBlank() ? this.getInstanceName() + ".lift" : "lift");
    this.lift.setUp();
    this.req.connect(ctrl.getReq());
    this.clear = ctrl.getClear();
    this.at.connect(ctrl.getAt());
    this.isOpen.connect(door.getIsOpen());
    this.isClosed.connect(door.getIsClosed());
    this.isObstacle.connect(door.getIsObstacle());
    this.open = door.getOpen();
    this.close = door.getClose();
    door.getClosed().connect(ctrl.getIsClosed());
    this.up = lift.getUp();
    this.down = lift.getDown();
    ctrl.getDoor().connect(door.getCmd());
    ctrl.getLift().connect(lift.getCmd());
  }

  @Override
  public void init() {
    this.ctrl.init();
    this.door.init();
    this.lift.init();
  }

  @Override
  public void tick() {
    // update subcomponents
    this.ctrl.tick();
    this.door.tick();
    this.lift.tick();
  }

  @Override
  public boolean isSynced() {
    return this.getReq().isSynced()
        && this.getAt().isSynced()
        && this.getIsOpen().isSynced()
        && this.getIsClosed().isSynced()
        && this.getIsObstacle().isSynced();
  }
}
