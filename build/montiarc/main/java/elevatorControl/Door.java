/* generated by template ma2java.component.CompilationUnit.ftl*/

/* (c) https://github.com/MontiCore/monticore */
/* generated by template ma2java.Package.ftl*/
package elevatorControl;

/* generated by template ma2java.Import.ftl*/
import elevatorControl.ElevatorIO.DoorCMD;
/* generated by template ma2java.Import.ftl*/
import elevatorControl.ElevatorIO.LiftCMD;
/* generated by template ma2java.Import.ftl*/
import java.lang.*;

/* generated by template ma2java.component.Component.ftl*/

/* generated by template ma2java.component.Header.ftl*/

public class Door implements montiarc.rte.timesync.IComponent {

  private String instanceName = "";

  public void setInstanceName(String instanceName) {
    this.instanceName = instanceName;
  }

  public String getInstanceName() {
    return this.instanceName;
  }

  // ports
  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IInPort<elevatorControl.ElevatorIO.DoorCMD> cmd;

  public montiarc.rte.timesync.IInPort<elevatorControl.ElevatorIO.DoorCMD> getCmd() {
    return this.cmd;
  }

  public void setCmd(montiarc.rte.timesync.IInPort<elevatorControl.ElevatorIO.DoorCMD> cmd) {
    this.cmd = cmd;
  }

  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IInPort<java.lang.Boolean> isOpen;

  public montiarc.rte.timesync.IInPort<java.lang.Boolean> getIsOpen() {
    return this.isOpen;
  }

  public void setIsOpen(montiarc.rte.timesync.IInPort<java.lang.Boolean> isOpen) {
    this.isOpen = isOpen;
  }

  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IInPort<java.lang.Boolean> isClosed;

  public montiarc.rte.timesync.IInPort<java.lang.Boolean> getIsClosed() {
    return this.isClosed;
  }

  public void setIsClosed(montiarc.rte.timesync.IInPort<java.lang.Boolean> isClosed) {
    this.isClosed = isClosed;
  }

  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IInPort<java.lang.Boolean> isObstacle;

  public montiarc.rte.timesync.IInPort<java.lang.Boolean> getIsObstacle() {
    return this.isObstacle;
  }

  public void setIsObstacle(montiarc.rte.timesync.IInPort<java.lang.Boolean> isObstacle) {
    this.isObstacle = isObstacle;
  }

  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IOutPort<java.lang.Boolean> open;

  public montiarc.rte.timesync.IOutPort<java.lang.Boolean> getOpen() {
    return this.open;
  }

  public void setOpen(montiarc.rte.timesync.IOutPort<java.lang.Boolean> open) {
    this.open = open;
  }

  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IOutPort<java.lang.Boolean> close;

  public montiarc.rte.timesync.IOutPort<java.lang.Boolean> getClose() {
    return this.close;
  }

  public void setClose(montiarc.rte.timesync.IOutPort<java.lang.Boolean> close) {
    this.close = close;
  }

  /* generated by template ma2java.component.Port.ftl*/

  protected montiarc.rte.timesync.IOutPort<java.lang.Boolean> closed;

  public montiarc.rte.timesync.IOutPort<java.lang.Boolean> getClosed() {
    return this.closed;
  }

  public void setClosed(montiarc.rte.timesync.IOutPort<java.lang.Boolean> closed) {
    this.closed = closed;
  }

  // parameters

  // variables
  protected int timer;

  public Door() {

    this.timer = 5;
  }

  /* generated by template ma2java.component.Atomic.ftl*/

  /* generated by template ma2java.component.Automaton.ftl*/

  protected States currentState;

  protected States getCurrentState() {
    return this.currentState;
  }

  public void compute() {
    montiarc.rte.log.Log.comment("Computing component " + this.getInstanceName() + "");
    // log state @ pre
    montiarc.rte.log.Log.trace("State@pre = " + this.getCurrentState());
    // log input values
    montiarc.rte.log.Log.trace("Value of input port cmd = " + this.getCmd().getValue());
    montiarc.rte.log.Log.trace("Value of input port isOpen = " + this.getIsOpen().getValue());
    montiarc.rte.log.Log.trace("Value of input port isClosed = " + this.getIsClosed().getValue());
    montiarc.rte.log.Log.trace(
        "Value of input port isObstacle = " + this.getIsObstacle().getValue());
    // transition from the current state
    switch (currentState) {
      case Wait:
        transitionFromWait();
        break;
      case CloseDoor:
        transitionFromCloseDoor();
        break;
      case DoorIsClosed:
        transitionFromDoorIsClosed();
        break;
      case OpenDoor:
        transitionFromOpenDoor();
        break;
      case DoorIsOpen:
        transitionFromDoorIsOpen();
        break;
    }
    // log output values
    montiarc.rte.log.Log.trace("Value of output port open = " + this.getOpen().getValue());
    montiarc.rte.log.Log.trace("Value of output port close = " + this.getClose().getValue());
    montiarc.rte.log.Log.trace("Value of output port closed = " + this.getClosed().getValue());
    // log state @ post
    montiarc.rte.log.Log.trace("State@post = " + this.getCurrentState());
  }

  protected enum States {
    Wait(),
    CloseDoor(),
    DoorIsClosed(),
    OpenDoor(),
    DoorIsOpen();

    final States superState;

    java.util.Optional<States> getSuperState() {
      return java.util.Optional.ofNullable(this.superState);
    }

    States() {
      this.superState = null;
    }

    States(States superState) {
      this.superState = superState;
    }
  }

  protected void exit(States from, States to) {
    switch (from) {
      case Wait:
        exitWait();
        break;
      case CloseDoor:
        exitCloseDoor();
        break;
      case DoorIsClosed:
        exitDoorIsClosed();
        break;
      case OpenDoor:
        exitOpenDoor();
        break;
      case DoorIsOpen:
        exitDoorIsOpen();
        break;
    }
    if (from != to && from.getSuperState().isPresent()) {
      exit(from.getSuperState().get(), to);
    }
  }

  protected void transitionFromWait() {
    // input
    final elevatorControl.ElevatorIO.DoorCMD cmd = this.getCmd().getValue();
    final java.lang.Boolean isOpen = this.getIsOpen().getValue();
    final java.lang.Boolean isClosed = this.getIsClosed().getValue();
    final java.lang.Boolean isObstacle = this.getIsObstacle().getValue();

    /* generated by template ma2java.component.Transition.ftl*/

    if (timer > 0) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.Wait);
      // output
      java.lang.Boolean open = null;
      java.lang.Boolean close = null;
      java.lang.Boolean closed = null;

      // reaction
      {
        open = false;
        close = false;
        closed = false;
        timer = timer - 1;
      }
      // result
      if (open != null) this.getOpen().setValue(open);
      if (close != null) this.getClose().setValue(close);
      if (closed != null) this.getClosed().setValue(closed);

      // entry state(s)
      this.transitionToWait();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (timer == 0) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.Wait);
      // output
      java.lang.Boolean open = null;
      java.lang.Boolean close = null;
      java.lang.Boolean closed = null;

      // reaction
      {
        open = false;
        close = false;
        closed = false;
      }
      // result
      if (open != null) this.getOpen().setValue(open);
      if (close != null) this.getClose().setValue(close);
      if (closed != null) this.getClosed().setValue(closed);

      // entry state(s)
      this.transitionToCloseDoor();
    } else {
    }

    this.getOpen().sync();
    this.getClose().sync();
    this.getClosed().sync();
  }

  protected void transitionToWait() {
    // transition to state
    this.currentState = States.Wait;
    this.entryWait();
  }

  protected void entryWait() {}

  protected void exitWait() {}

  protected void initWait() {
    // inputs
    final elevatorControl.ElevatorIO.DoorCMD cmd = this.getCmd().getValue();
    final java.lang.Boolean isOpen = this.getIsOpen().getValue();
    final java.lang.Boolean isClosed = this.getIsClosed().getValue();
    final java.lang.Boolean isObstacle = this.getIsObstacle().getValue();

    // outputs
    java.lang.Boolean open = null;
    java.lang.Boolean close = null;
    java.lang.Boolean closed = null;

    // initial action
    closed = false;

    // result
    if (open != null) this.getOpen().setValue(open);
    if (close != null) this.getClose().setValue(close);
    if (closed != null) this.getClosed().setValue(closed);
  }

  protected void transitionFromCloseDoor() {
    // input
    final elevatorControl.ElevatorIO.DoorCMD cmd = this.getCmd().getValue();
    final java.lang.Boolean isOpen = this.getIsOpen().getValue();
    final java.lang.Boolean isClosed = this.getIsClosed().getValue();
    final java.lang.Boolean isObstacle = this.getIsObstacle().getValue();

    /* generated by template ma2java.component.Transition.ftl*/

    if ((cmd == null || cmd == DoorCMD.CLOSE) && !isObstacle && !isClosed) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.CloseDoor);
      // output
      java.lang.Boolean open = null;
      java.lang.Boolean close = null;
      java.lang.Boolean closed = null;

      // reaction
      {
        open = false;
        close = true;
        closed = false;
      }
      // result
      if (open != null) this.getOpen().setValue(open);
      if (close != null) this.getClose().setValue(close);
      if (closed != null) this.getClosed().setValue(closed);

      // entry state(s)
      this.transitionToCloseDoor();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if ((cmd == null || cmd == DoorCMD.CLOSE) && !isObstacle && isClosed) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.CloseDoor);
      // output
      java.lang.Boolean open = null;
      java.lang.Boolean close = null;
      java.lang.Boolean closed = null;

      // reaction
      {
        open = false;
        close = false;
        closed = true;
      }
      // result
      if (open != null) this.getOpen().setValue(open);
      if (close != null) this.getClose().setValue(close);
      if (closed != null) this.getClosed().setValue(closed);

      // entry state(s)
      this.transitionToDoorIsClosed();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (isObstacle) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.CloseDoor);
      // output
      java.lang.Boolean open = null;
      java.lang.Boolean close = null;
      java.lang.Boolean closed = null;

      // reaction
      {
        open = true;
        close = false;
        closed = false;
        timer = 3;
      }
      // result
      if (open != null) this.getOpen().setValue(open);
      if (close != null) this.getClose().setValue(close);
      if (closed != null) this.getClosed().setValue(closed);

      // entry state(s)
      this.transitionToOpenDoor();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (cmd != null && cmd == DoorCMD.OPEN && !isObstacle) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.CloseDoor);
      // output
      java.lang.Boolean open = null;
      java.lang.Boolean close = null;
      java.lang.Boolean closed = null;

      // reaction
      {
        open = true;
        close = false;
        closed = false;
        timer = 3;
      }
      // result
      if (open != null) this.getOpen().setValue(open);
      if (close != null) this.getClose().setValue(close);
      if (closed != null) this.getClosed().setValue(closed);

      // entry state(s)
      this.transitionToOpenDoor();
    } else {
    }

    this.getOpen().sync();
    this.getClose().sync();
    this.getClosed().sync();
  }

  protected void transitionToCloseDoor() {
    // transition to state
    this.currentState = States.CloseDoor;
    this.entryCloseDoor();
  }

  protected void entryCloseDoor() {}

  protected void exitCloseDoor() {}

  protected void initCloseDoor() {}

  protected void transitionFromDoorIsClosed() {
    // input
    final elevatorControl.ElevatorIO.DoorCMD cmd = this.getCmd().getValue();
    final java.lang.Boolean isOpen = this.getIsOpen().getValue();
    final java.lang.Boolean isClosed = this.getIsClosed().getValue();
    final java.lang.Boolean isObstacle = this.getIsObstacle().getValue();

    /* generated by template ma2java.component.Transition.ftl*/

    if (cmd == null || cmd == DoorCMD.CLOSE) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.DoorIsClosed);
      // output
      java.lang.Boolean open = null;
      java.lang.Boolean close = null;
      java.lang.Boolean closed = null;

      // reaction
      {
        open = false;
        close = false;
        closed = true;
      }
      // result
      if (open != null) this.getOpen().setValue(open);
      if (close != null) this.getClose().setValue(close);
      if (closed != null) this.getClosed().setValue(closed);

      // entry state(s)
      this.transitionToDoorIsClosed();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (cmd != null && cmd == DoorCMD.OPEN) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.DoorIsClosed);
      // output
      java.lang.Boolean open = null;
      java.lang.Boolean close = null;
      java.lang.Boolean closed = null;

      // reaction
      {
        open = true;
        close = false;
        closed = false;
        timer = 10;
      }
      // result
      if (open != null) this.getOpen().setValue(open);
      if (close != null) this.getClose().setValue(close);
      if (closed != null) this.getClosed().setValue(closed);

      // entry state(s)
      this.transitionToOpenDoor();
    } else {
    }

    this.getOpen().sync();
    this.getClose().sync();
    this.getClosed().sync();
  }

  protected void transitionToDoorIsClosed() {
    // transition to state
    this.currentState = States.DoorIsClosed;
    this.entryDoorIsClosed();
  }

  protected void entryDoorIsClosed() {}

  protected void exitDoorIsClosed() {}

  protected void initDoorIsClosed() {}

  protected void transitionFromOpenDoor() {
    // input
    final elevatorControl.ElevatorIO.DoorCMD cmd = this.getCmd().getValue();
    final java.lang.Boolean isOpen = this.getIsOpen().getValue();
    final java.lang.Boolean isClosed = this.getIsClosed().getValue();
    final java.lang.Boolean isObstacle = this.getIsObstacle().getValue();

    /* generated by template ma2java.component.Transition.ftl*/

    if (!isOpen) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.OpenDoor);
      // output
      java.lang.Boolean open = null;
      java.lang.Boolean close = null;
      java.lang.Boolean closed = null;

      // reaction
      {
        open = true;
        close = false;
        closed = false;
      }
      // result
      if (open != null) this.getOpen().setValue(open);
      if (close != null) this.getClose().setValue(close);
      if (closed != null) this.getClosed().setValue(closed);

      // entry state(s)
      this.transitionToOpenDoor();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (isOpen) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.OpenDoor);
      // output
      java.lang.Boolean open = null;
      java.lang.Boolean close = null;
      java.lang.Boolean closed = null;

      // reaction
      {
        open = false;
        close = false;
        closed = false;
      }
      // result
      if (open != null) this.getOpen().setValue(open);
      if (close != null) this.getClose().setValue(close);
      if (closed != null) this.getClosed().setValue(closed);

      // entry state(s)
      this.transitionToDoorIsOpen();
    } else {
    }

    this.getOpen().sync();
    this.getClose().sync();
    this.getClosed().sync();
  }

  protected void transitionToOpenDoor() {
    // transition to state
    this.currentState = States.OpenDoor;
    this.entryOpenDoor();
  }

  protected void entryOpenDoor() {}

  protected void exitOpenDoor() {}

  protected void initOpenDoor() {}

  protected void transitionFromDoorIsOpen() {
    // input
    final elevatorControl.ElevatorIO.DoorCMD cmd = this.getCmd().getValue();
    final java.lang.Boolean isOpen = this.getIsOpen().getValue();
    final java.lang.Boolean isClosed = this.getIsClosed().getValue();
    final java.lang.Boolean isObstacle = this.getIsObstacle().getValue();

    /* generated by template ma2java.component.Transition.ftl*/

    if (timer > 0) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.DoorIsOpen);
      // output
      java.lang.Boolean open = null;
      java.lang.Boolean close = null;
      java.lang.Boolean closed = null;

      // reaction
      {
        open = false;
        close = false;
        closed = false;
        timer = timer - 1;
      }
      // result
      if (open != null) this.getOpen().setValue(open);
      if (close != null) this.getClose().setValue(close);
      if (closed != null) this.getClosed().setValue(closed);

      // entry state(s)
      this.transitionToDoorIsOpen();
    } else
    /* generated by template ma2java.component.Transition.ftl*/

    if (timer == 0) {
      // exit state(s)
      this.exit(this.getCurrentState(), States.DoorIsOpen);
      // output
      java.lang.Boolean open = null;
      java.lang.Boolean close = null;
      java.lang.Boolean closed = null;

      // reaction
      {
        open = false;
        close = false;
        closed = false;
      }
      // result
      if (open != null) this.getOpen().setValue(open);
      if (close != null) this.getClose().setValue(close);
      if (closed != null) this.getClosed().setValue(closed);

      // entry state(s)
      this.transitionToCloseDoor();
    } else {
    }

    this.getOpen().sync();
    this.getClose().sync();
    this.getClosed().sync();
  }

  protected void transitionToDoorIsOpen() {
    // transition to state
    this.currentState = States.DoorIsOpen;
    this.entryDoorIsOpen();
  }

  protected void entryDoorIsOpen() {}

  protected void exitDoorIsOpen() {}

  protected void initDoorIsOpen() {}

  @Override
  public void init() {
    // execute the initial action
    this.initWait();
    // transition to the initial state
    this.transitionToWait();
    // provide initial value for delay ports

    this.closed.tick();
  }

  public void setUp() {
    this.cmd =
        new montiarc.rte.timesync.InPort<>(
            !this.getInstanceName().isBlank() ? this.getInstanceName() + "." + "cmd" : "cmd");
    this.isOpen =
        new montiarc.rte.timesync.InPort<>(
            !this.getInstanceName().isBlank() ? this.getInstanceName() + "." + "isOpen" : "isOpen");
    this.isClosed =
        new montiarc.rte.timesync.InPort<>(
            !this.getInstanceName().isBlank()
                ? this.getInstanceName() + "." + "isClosed"
                : "isClosed");
    this.isObstacle =
        new montiarc.rte.timesync.InPort<>(
            !this.getInstanceName().isBlank()
                ? this.getInstanceName() + "." + "isObstacle"
                : "isObstacle");
    this.open =
        new montiarc.rte.timesync.OutPort<>(
            !this.getInstanceName().isBlank() ? this.getInstanceName() + "." + "open" : "open");
    this.close =
        new montiarc.rte.timesync.OutPort<>(
            !this.getInstanceName().isBlank() ? this.getInstanceName() + "." + "close" : "close");
    this.closed =
        new montiarc.rte.timesync.DelayPort<>(
            !this.getInstanceName().isBlank() ? this.getInstanceName() + "." + "closed" : "closed");
  }

  @Override
  public void tick() {
    // update outgoing ports
    this.open.tick();
    this.close.tick();
    this.closed.tick();
  }

  @Override
  public boolean isSynced() {
    return this.getCmd().isSynced()
        && this.getIsOpen().isSynced()
        && this.getIsClosed().isSynced()
        && this.getIsObstacle().isSynced();
  }
}
